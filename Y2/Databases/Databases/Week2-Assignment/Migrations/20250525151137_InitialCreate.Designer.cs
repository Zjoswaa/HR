// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Week2_Assignment.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20250525151137_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Department", b =>
                {
                    b.Property<string>("Number")
                        .HasColumnType("char(6)");

                    b.Property<string>("ManagerSSN")
                        .IsRequired()
                        .HasColumnType("char(9)");

                    b.Property<DateTime>("ManagerStartDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("Number");

                    b.HasIndex("ManagerSSN");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("DepartmentLocation", b =>
                {
                    b.Property<string>("DepartmentNumber")
                        .HasColumnType("char(6)");

                    b.Property<string>("Location")
                        .HasColumnType("varchar(20)");

                    b.HasKey("DepartmentNumber", "Location");

                    b.ToTable("DepartmentLocation");
                });

            modelBuilder.Entity("Dependent", b =>
                {
                    b.Property<string>("EmployeeSSN")
                        .HasColumnType("char(9)");

                    b.Property<string>("DependentName")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EmployeeSSN", "DependentName");

                    b.ToTable("Dependent");
                });

            modelBuilder.Entity("Employee", b =>
                {
                    b.Property<string>("SSN")
                        .HasColumnType("char(9)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("DepartmentNumber")
                        .IsRequired()
                        .HasColumnType("char(6)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MiddleInitials")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<double>("Salary")
                        .HasColumnType("double precision");

                    b.HasKey("SSN");

                    b.HasIndex("DepartmentNumber");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("Project", b =>
                {
                    b.Property<string>("Number")
                        .HasColumnType("char(6)");

                    b.Property<string>("DepartmentNumber")
                        .IsRequired()
                        .HasColumnType("char(6)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("Number");

                    b.HasIndex("DepartmentNumber");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("WorksOn", b =>
                {
                    b.Property<string>("EmployeeSSN")
                        .HasColumnType("char(9)");

                    b.Property<string>("ProjectNumber")
                        .HasColumnType("char(6)");

                    b.Property<int>("Hours")
                        .HasColumnType("integer");

                    b.HasKey("EmployeeSSN", "ProjectNumber");

                    b.HasIndex("ProjectNumber");

                    b.ToTable("WorksOn");
                });

            modelBuilder.Entity("Department", b =>
                {
                    b.HasOne("Employee", "Manager")
                        .WithMany("ManagedDepartments")
                        .HasForeignKey("ManagerSSN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("DepartmentLocation", b =>
                {
                    b.HasOne("Department", "Department")
                        .WithMany("Locations")
                        .HasForeignKey("DepartmentNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Dependent", b =>
                {
                    b.HasOne("Employee", "Employee")
                        .WithMany("Dependents")
                        .HasForeignKey("EmployeeSSN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Employee", b =>
                {
                    b.HasOne("Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Project", b =>
                {
                    b.HasOne("Department", "Department")
                        .WithMany("Projects")
                        .HasForeignKey("DepartmentNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("WorksOn", b =>
                {
                    b.HasOne("Employee", "Employee")
                        .WithMany("Schedule")
                        .HasForeignKey("EmployeeSSN")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project", "Project")
                        .WithMany("Developers")
                        .HasForeignKey("ProjectNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Department", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Locations");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Employee", b =>
                {
                    b.Navigation("Dependents");

                    b.Navigation("ManagedDepartments");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Project", b =>
                {
                    b.Navigation("Developers");
                });
#pragma warning restore 612, 618
        }
    }
}
